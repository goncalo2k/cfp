# `utils/dockerfile`
# Use the official Golang image to create a build artifact.
FROM golang:1.20 as builder

# Set the Current Working Directory inside the container
WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./

# Download all dependencies. Dependencies will be cached if the go.mod and go.sum files are not changed
RUN go mod download

# Copy the source code into the container
COPY ./utils ./

RUN go build -o utils .

# Build the Go app with CGO disabled to produce a statically linked binary
RUN CGO_ENABLED=0 GOOS=linux go build -o utils

# Start a new stage from scratch
FROM alpine:latest

# Install necessary packages
RUN apk --no-cache add ca-certificates

# Copy the Pre-built binary file from the previous stage
COPY --from=builder /app/utils /utils

# Ensure the binary has executable permissions
RUN chmod +x /utils

# Expose port 8081 to the outside world
EXPOSE 8081

# Command to run the executable
CMD ["/utils"]
